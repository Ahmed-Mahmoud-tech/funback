CREATE DATABASE fun;

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    type VARCHAR(50) CHECK (type IN ('owner', 'employee')) NOT NULL,
    phone_number VARCHAR(20),
    place_name VARCHAR(255),
    location VARCHAR(255),
    employee_request BOOLEAN DEFAULT TRUE,
    reservation BOOLEAN DEFAULT TRUE,
    session BOOLEAN DEFAULT TRUE,
    purchases_items BOOLEAN DEFAULT TRUE,
    players_purchases BOOLEAN DEFAULT TRUE,
    checkout BOOLEAN DEFAULT TRUE,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE requests (
    id SERIAL PRIMARY KEY,
    from_user INT REFERENCES users(id),
    to_user INT REFERENCES users(id),
    status VARCHAR(50) CHECK (status IN ('pending', 'accepted', 'rejected')) DEFAULT 'pending',
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sections (
    id SERIAL PRIMARY KEY,
    section_name VARCHAR(255) NOT NULL,
    owner_id INT REFERENCES users(id),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE game (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    "ownerId" INT REFERENCES users(id),
    "singlePrice" DECIMAL(10, 2),
    "multiPrice" DECIMAL(10, 2),
    "createdBy" INT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE purchases_item (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2),
    "ownerId" INT REFERENCES users(id),
    "createdBy" INT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE players_purchase (
    id SERIAL PRIMARY KEY,
    "playerId" INT NOT NULL,
    "item" INT REFERENCES purchases_item(id),
    "ownerId" INT REFERENCES users(id),
    "count" INT NOT NULL,
    "status" VARCHAR(50) CHECK (status IN ('paid', 'notPaid')) NOT NULL DEFAULT 'notPaid',
    "createdBy" INT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE sessions (
    id SERIAL PRIMARY KEY,
    "playerId" INT NOT NULL,
    "ownerId" INT REFERENCES users(id),
    "sectionId" INT REFERENCES sections(id),
    "gameId" INT REFERENCES game(id),
    "type" VARCHAR(50) CHECK (type IN ('multi', 'single')) NOT NULL,
    "startTime" TIMESTAMP,
    "endTime" TIMESTAMP,
    "status" VARCHAR(50) CHECK (status IN ('paid', 'notPaid')) NOT NULL DEFAULT 'notPaid',
    "amount" DECIMAL(10, 2),
    "createdBy" INT,
    "createdAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE reservation (
    id SERIAL PRIMARY KEY,
    player_id INT NOT NULL,
    section_id INT REFERENCES sections(id),
    start_at TIMESTAMP NOT NULL,
    end_at TIMESTAMP NOT NULL,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    notification_type VARCHAR(50) NOT NULL
    from_user INT REFERENCES users(id),
    to_user INT REFERENCES users(id),
    body JSONB,
    is_read BOOLEAN DEFAULT TRUE,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE push_tokens (
    id SERIAL PRIMARY KEY,
    token TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);