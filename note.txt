CREATE DATABASE fun;

CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    type VARCHAR(50) CHECK (type IN ('owner', 'employee')) NOT NULL,
    phone_number VARCHAR(20),
    place_name VARCHAR(255),
    location VARCHAR(255),
    employee_request BOOLEAN DEFAULT TRUE,
    reservation BOOLEAN DEFAULT TRUE,
    session BOOLEAN DEFAULT TRUE,
    purchases_items BOOLEAN DEFAULT TRUE,
    players_purchases BOOLEAN DEFAULT TRUE,
    checkout BOOLEAN DEFAULT TRUE,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE requests (
    id SERIAL PRIMARY KEY,
    from_user INT REFERENCES users(id),
    to_user INT REFERENCES users(id),
    status VARCHAR(50) CHECK (status IN ('pending', 'accepted', 'rejected', 'blocked')) DEFAULT 'pending',
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sections (
    id SERIAL PRIMARY KEY,
    section_name VARCHAR(255) NOT NULL,
    owner_id INT REFERENCES users(id),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE games (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    owner_id INT REFERENCES users(id),
    single_price DECIMAL(10, 2),
    multi_price DECIMAL(10, 2),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE purchases_items (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2),
    owner_id INT REFERENCES users(id),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE players_purchases (
    id SERIAL PRIMARY KEY,
    playerId INT NOT NULL,
    item_id INT REFERENCES purchases_items(id),
    count INT NOT NULL,
    status VARCHAR(50) CHECK (status IN ('paid', 'notPaid')) NOT NULL DEFAULT 'notPaid',
    createdBy INT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL
);

CREATE TABLE session (
    id SERIAL PRIMARY KEY,
    player_id INT NOT NULL,
    section_id INT REFERENCES sections(id),
    game_id INT REFERENCES games(id),
    type VARCHAR(50) CHECK (type IN ('multi', 'single')) NOT NULL,
    start_time TIMESTAMP,
    end_time TIMESTAMP,
    status VARCHAR(50) CHECK (status IN ('paid', 'notPaid')) NOT NULL DEFAULT 'notPaid',
    amount DECIMAL(10, 2),
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE reservation (
    id SERIAL PRIMARY KEY,
    player_id INT NOT NULL,
    section_id INT REFERENCES sections(id),
    start_at TIMESTAMP NOT NULL,
    end_at TIMESTAMP NOT NULL,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE notification (
    id SERIAL PRIMARY KEY,
    from_user INT REFERENCES users(id),
    to_user INT REFERENCES users(id),
    title VARCHAR(255),
    body TEXT,
    actions JSONB DEFAULT '[]'::JSONB,
    created_by INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
